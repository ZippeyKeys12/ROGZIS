# frozen_string_literal: true

require 'fileutils'

require 'zip'

namespace 'dist' do
  desc 'Compiles submods'
  task :compile do
    first = true
    Dir.foreach('./packages/') do |package|
      next if (package == '.') || (package == '..')

      puts "Building: #{package.capitalize}"
      dest = "./packages/#{package.capitalize}"

      if first
        settings = "-V#{ZVERSION} "
        first = false
      else
        settings = ''
      end
      if File.exist?("#{dest}/SETTINGS")
        open("#{dest}/SETTINGS").each do |line|
          settings += line
        end
      end

      sh "pipenv run py scripts/main/compile/bobby/build.py #{dest} #{settings}"
      puts '  Successful'
    end
  end

  desc 'Builds PK3 out of compiled submods'
  task :build do
    FileUtils.rm_rf('./dist/', secure: true)
    Dir.mkdir './dist' unless File.exist?('./dist')
    Dir.chdir './packages'
    Dir.foreach('./') do |package|
      next if (package == '.') || (package == '..')

      puts Dir.pwd
      subdir = "./#{package}/dist/#{package.capitalize}/"
      Dir.foreach(subdir) do |item|
        next if (item == '.') || (item == '..')

        nItem = subdir + item
        if File.directory?(nItem)
          FileUtils.cp_r(nItem, "../dist/#{item}")
        elsif File.file?(nItem)
          dest = "../dist/#{item}"
          if File.exist?(dest)
            open(dest, 'a') do |o|
              open(nItem, 'r').each do |line|
                o.puts(line)
              end
            end
          elsif
            FileUtils.copy(nItem, dest)
          end
        end
      end
    end

    Dir.chdir('../dist/')
    Zip::File.open("./#{NAME}-v#{VERSION}.pk3", Zip::File::CREATE) do |zipFile|
      zipFolder('./', zipFile)
    end
  end

  task all: %i[compile build]
end

def zipFolder(directory, _zipfile)
  Dir.foreach(directory) do |filename|
    next if (filename == '.') || (filename == '..')

    _zipfile.add("#{directory}#{filename}", "#{directory}#{filename}")
    zipFolder("#{directory}#{filename}/", _zipfile) if File.directory?(filename)
  end
end
