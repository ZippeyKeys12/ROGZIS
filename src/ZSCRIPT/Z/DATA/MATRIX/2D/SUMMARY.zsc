class ZMatrix2_G:ZObject{
    private
    uint __Height__,
         __Width__;

    Array<ZGaussian> Values;

    static
    ZMatrix2_G Create(uint Height, uint Width){
        ZMatrix2_G Result=new('ZMatrix2_G');
        if(Height<=0 || Width<=0)
            Result.Fatal("Attempted to create a non-positively-sized summary matrix");
        Result.__Height__=Height;
        Result.__Width__=Width;
        for(int i=0; i<Height*Width; i++)
            Result.Values.Push(ZGaussian.Create(0, 1));
        return Result;
    }

    //////////
    // Info //
    //////////

    ZGaussian Get(uint Row, uint Column) const
    {return Values[Row*__Width__+Column];}

    double GetMean(uint Row, uint Column)
    {return Get(Row, Column).Mean();}

    double GetStdDev(uint Row, uint Column)
    {return Get(Row, Column).StdDev();}

    ///////////////////
    // Manipulations //
    ///////////////////

    void Set(uint Row, uint Column, double Mean, double StdDev)
    {Values[Row*__Width__+Column]=ZGaussian.Create(Mean, StdDev);}

    void SetModel(uint Row, uint Column, ZGaussian Distribution)
    {Values[Row*__Width__+Column]=Distribution.Clone();}

    void SetMean(uint Row, uint Column, double Value)
    {Set(Row, Column, Value, GetStdDev(Row, Column));}

    void SetStdDev(uint Row, uint Column, double Value)
    {Set(Row, Column, GetMean(Row, Column), Value);}

    ZMatrix2_G Add(ZMatrix2_G Other) const{
        if(__Height__!=Other.__Height__ || __Width__!=Other.__Width__)
            Fatal("Attempted to add differently-sized matrices");
        ZMatrix2_G Result=Create(__Height__, __Width__);
        for(int i=0; i<Values.Size(); i++)
            Result.Values[i]=Values[i].Add(Other.Values[i]);
        return Result;
    }

    ZMatrix2_G Sub(ZMatrix2_G Other) const{
        if(__Height__!=Other.__Height__ || __Width__!=Other.__Width__)
            Fatal("Attempted to subtract differently-sized matrices");
        ZMatrix2_G Result=Create(__Height__, __Width__);
        for(int i=0; i<Values.Size(); i++)
            Result.Values[i]=Values[i].Sub(Other.Values[i]);
        return Result;
    }

    ZMatrix2_G SMul(double Multiplier) const{
        ZMatrix2_G Result=Create(__Height__, __Width__);
        for(int i=0; i<Values.Size(); i++)
            Result.Values[i]=Values[i].SMul(Multiplier);
        return Result;
    }

    ZMatrix2_G SDiv(double Divisor) const{
        ZMatrix2_G Result=Create(__Height__, __Width__);
        for(int i=0; i<Values.Size(); i++)
            Result.Values[i]=Values[i].SDiv(Divisor);
        return Result;
    }

    ////////////////
    // Transforms //
    ////////////////

    virtual
    ZMatrix2_G Clone() const{
        ZMatrix2_G Result=Create(__Height__, __Width__);
        Result.Values.Copy(Values);
        return Result;
    }
}