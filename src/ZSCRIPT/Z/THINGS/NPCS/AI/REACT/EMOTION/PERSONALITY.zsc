class ZPersonality play{
    const DIMENSIONCOUNT=5;
    const FACETCOUNT=6;

    Av_Mapper Bipolar;

    Av_Matrix2 Facets;

    static
    ZPersonality Create(Av_Matrix2 Facets)
    {return new('ZPersonality').Init(Facets.Clone());}

    static
    ZPersonality Randomized()
    {return new('ZPersonality').Init();}

    private
    ZPersonality Init(Av_Matrix2 OrigFacets=null){
        if(!OrigFacets){
            Facets=Av_Matrix2.Create(FACETCOUNT, DIMENSIONCOUNT);
            Av_Gaussian Distribution=Av_Gaussian.Create(0, .125);
            for(int i=0; i<DIMENSIONCOUNT*FACETCOUNT; i++)
                Facets.Values[i]=Clamp(Distribution.Generate(), 0, 1);
        }else Facets=OrigFacets.SClamp(0, 1); // Maybe -1 to 1, inconsistent standards
        Bipolar=Av_Mapper.Create(-1, 1);
        return self;
    }

    ZPersonality Clone() const{
        ZPersonality Result=new('ZPersonality');
        Result.Facets=Facets.Clone();
        return Result;
    }

    Av_Vector OCEAN(bool AsRow=false)
    {return Facets.TAMean(AsRow);}

    double Facet(Name Facet){
        switch(Facet){
            // Openness
            case 'Curious': return Facets.Get(0, 0);
            case 'Imaginative': return Facets.Get(1, 0);
            case 'Artistic': return Facets.Get(2, 0);
            case 'Interested': return Facets.Get(3, 0);
            case 'Excitable': return Facets.Get(4, 0);
            case 'Unconventional': return Facets.Get(5, 0);

            // Conscientiousness
            case 'Efficient': return Facets.Get(0, 1);
            case 'Organized': return Facets.Get(1, 1);
            case 'Dutiful': return Facets.Get(2, 1);
            case 'Thorough': return Facets.Get(3, 1);
            case 'Hardworking': return Facets.Get(4, 1);
            case 'Deliberate': return Facets.Get(5, 1);

            // Extraversion
            case 'Sociable': return Facets.Get(0, 2);
            case 'Assertive': return Facets.Get(1, 2);
            case 'Energetic': return Facets.Get(2, 2);
            case 'Adventurous': return Facets.Get(3, 2);
            case 'Enthusiastic': return Facets.Get(4, 2);
            case 'Outgoing': return Facets.Get(5, 2);

            // Agreeableness
            case 'Forgiving': return Facets.Get(0, 3);
            case 'Straightforward': return Facets.Get(1, 3);
            case 'Altruistic': return Facets.Get(2, 3);
            case 'Compliant': return Facets.Get(3, 3);
            case 'Modest': return Facets.Get(4, 3);
            case 'Sympathetic': return Facets.Get(5, 3);

            // Neuroticism
            case 'Tense': return Facets.Get(0, 4);
            case 'Irritable': return Facets.Get(1, 4);
            case 'Discontented': return Facets.Get(2, 4);
            case 'Shy': return Facets.Get(3, 4);
            case 'Impulsive': return Facets.Get(4, 4);
            case 'Vulnerable': return Facets.Get(5, 4);

            // Default
            default: return double.NaN;
        }
    }

    double Empathy(){
        ZManager Manager=ZManager.Instance();
        if(!Manager.P2E){
            // Transformation Matrix: Personality -> Empathy
            static const double StaticP2E[]={
                .354, .177, .135, .312, .021
            };
            Manager.P2E=Av_Vector.Create(ZPersonality.DIMENSIONCOUNT);
            for(int i=0; i<StaticP2E.Size(); i++)
                Manager.P2E.Values[i]=StaticP2E[i];
        }
        return Manager.P2E.VDot(Av_Vector(Bipolar.VANormRangeMap(OCEAN())));
    }

    Av_Vector ToPAD(){
        ZManager Manager=ZManager.Instance();
        if(!Manager.P2M){
            // Transformation Matrix: Personality -> Mood
            static const double StaticP2M[]={
                 0,   0,  .21,  .59,  .19,
                .15,  0,   0,   .3,  -.57, // .57 might be positive, research papers are inconsistent...
                .25, .17, .6,  -.32,   0
            };
            Manager.P2M=Av_Matrix2.Create(ZMood.DIMENSIONCOUNT, ZPersonality.DIMENSIONCOUNT);
            for(int i=0; i<StaticP2M.Size(); i++)
                Manager.P2M.Values[i]=StaticP2M[i];
        }
        return Manager.P2M.VMul(OCEAN()).SClamp(-1, 1);
    }
}