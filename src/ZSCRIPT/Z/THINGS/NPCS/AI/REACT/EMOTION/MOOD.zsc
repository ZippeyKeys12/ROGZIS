class ZMood play{
    const DIMENSIONCOUNT=3;

    Av_Vector Dimensions,
            Ideal;

    static
    ZMood Create(ZPersonality Personality){
        ZMood Result=new('ZMood');
        Result.Ideal=Personality.ToPAD();
        Result.Dimensions=Personality.ToPAD();
        return Result;
    }

    void Tick(){

    }

    Av_Vector PAD()
    {return Dimensions.Clone();}

    Name Subspace(){
        switch(Av_Calc_S.Sign(Dimensions.Get(0))){
            case  1: switch(Av_Calc_S.Sign(Dimensions.Get(1))){
                case  1: switch(Av_Calc_S.Sign(Dimensions.Get(2))){
                    case  1: return 'Exuberant';
                    case -1: return 'Dependent';
                }
                case -1: switch(Av_Calc_S.Sign(Dimensions.Get(2))){
                    case  1: return 'Relaxed';
                    case -1: return 'Docile';
                }
            }
            case -1: switch(Av_Calc_S.Sign(Dimensions.Get(1))){
                case  1: switch(Av_Calc_S.Sign(Dimensions.Get(2))){
                    case  1: return 'Hostile';
                    case -1: return 'Anxious';
                }
                case -1: switch(Av_Calc_S.Sign(Dimensions.Get(2))){
                    case  1: return 'Disdainful';
                    case -1: return 'Bored';
                }
            }
            default: return '';
        }
    }

    Name Expression(){
        if(Av_Calc_S.Sign(Dimensions.Get(0))==1)
            return 'Happy';
        else if(Av_Calc_S.Sign(Dimensions.Get(1))==-1)
            return 'Sad';
        else if(Av_Calc_S.Sign(Dimensions.Get(2))==1)
            return 'Angry';
        else
            return 'Fearful';
    }

    Av_Vector ToEkman(){
        ZManager Manager=ZManager.Instance();
        if(!Manager.M2E_Ekman){
            // Transformation Matrix: Mood -> Emotion - Ekman Model
            static const double StaticM2E[]={
                -.51, -.4, -.64, .4,  -.4,
                 .59,  .2,  .6,  .2,  -.2,
                 .25,  .1, -.43, .15, -.5
            };
            Manager.M2E_Ekman=Av_Matrix2.Create(ZMood.DIMENSIONCOUNT, ZEmotion.DIMENSIONCOUNT_EKMAN);
            for(int i=0; i<StaticM2E.Size(); i++)
                Manager.M2E_Ekman.Values[i]=StaticM2E[i];
        }
        return PAD().M2Mul(Manager.M2E_Ekman).SClamp(0, 1);
    }

    Av_Vector ToOCC(){
        ZManager Manager=ZManager.Instance();
        if(!Manager.M2E_OCC){
            // Transformation Matrix: Mood -> Emotion - OCC Model
            static const double StaticM2E[]={
                 .5,  .3,  -.2,
                -.51, .59,  .25,
                -.3,  .1,  -.4,
                -.4, -.2,  -.5,
                -.64, .6,  -.43,
                -.5, -.3,  -.7,
                 .3, -.3,  -.1,
                 .6,  .5,   .4,
                 .4,  .2,  -.3,
                 .4,  .2,   .2,
                -.6,  .6,   .3,
                 .2,  .2,  -.1,
                 .4,  .2,   .1,
                 .3,  .1,   .2,
                -.4, -.2,  -.5,
                 .4,  .3,   .3,
                 .2, -.3,   .4,
                -.3,  .1,  -.6,
                -.3, -.1,   .4,
                -.2, -.3,  -.2,
                 .3, -.2,   .4,
                -.3,  .1,  -.6
            };
            Manager.M2E_OCC=Av_Matrix2.Create(ZEmotion.DIMENSIONCOUNT_OCC, ZMood.DIMENSIONCOUNT);
            for(int i=0; i<StaticM2E.Size(); i++)
                Manager.M2E_OCC.Values[i]=StaticM2E[i];
            Manager.M2E_OCC=Manager.M2E_OCC.Transpose();
        }
        return PAD().M2Mul(Manager.M2E_OCC).SClamp(0, 1);
    }
}