class ZUtility:Av_Object{
    Array<ZUtilityAxis> Axes;

    bool Push(ZUtilityAxis Axis){
        if(Axes.Find(Axis)!=Axes.Size()){
            Error("Axis already exists");
            return false;
        }
        return Axes.Push(Axis);
    }

    double Get(Av_Vector Inputs){
        if(Inputs.Size()!=Axes.Size()){
            Error("Incorrect Number of Axes\nIs: "..Inputs.Size()..", Should Be: "..Axes.Size());
            return double.NaN;
        }
        double Score=1;
        for(int i=0; i<Axes.Size(); i++)
            Score*=Axes[i].Get(Inputs.Get(i));
        return Score*(1+(1-1/Axes.Size())*(1-Score));
    }
}

class ZUtilityAxis{
    bool XSign,
         YSign;

    Av_Mapper Mapper;

    Av_FBase Func;

    static
    ZUtilityAxis Create(Av_FBase Function, double Min, double Max, bool XSign=true, bool YSign=true){
        ZUtilityAxis Result=new('ZUtilityAxis');
        Result.XSign=XSign;
        Result.YSign=YSign;
        Result.Mapper=Av_Mapper.Create(Min, Max);
        Result.Func=Function;
        return Result;
    }

    double Get(double X){
        X=Mapper.NormRangeMap(X);
        if(!XSign)
            X=1-X;
        // X=Func.Apply(X);
        if(!YSign)
            X=1-X;
        return Clamp(X, 0, 1);
    }
}