class ZNPC:ZActor{
    Class<ZBrain> BrainName;

    ZBrain Brain;

    Property Brain: BrainName;

    [Property]{
        [Flags]
        // Physics
        Pushable=false;
        NoTrigger=false;

        // (In)Abilities
        NoTelestomp=false;
        [ZNPC]
        Brain='ZBrain';
    }

    virtual
    clearscope
    bool IsFriend(Actor Other) const
    {return Species==Other.Species;}

    override
    void BeginPlay(){
        super.BeginPlay();
        Brain=ZBrain.Create(BrainName, self);
    }

    override
    void Think()
    {bool Acting=Brain.Think();}
}

class ZZZ:ZNPC{
    Av_Plan Plan;

    [Property]{
        [Default]
        Radius=20;
        Height=56;
        [Type]
        Monster;
    }

    States{
        Spawn:
            POSS A 1{
                if(!Target)
                    Target=ZManager.Instance().WorldState.Player;
                // if(CheckSight(Target)){
                //     Plan=null;
                //     A_MoveTo();
                // }else{
                //     A_Star();
                //     if(Plan && Plan.Size()>0 && Plan.Peek()){
                //         if(Distance3DSquared(ZPathNode(Plan.Peek()).Marker)<1){
                //             Plan.Pop();
                //             console.printf("yesx!");
                //         }
                //         if(Plan.Size()>0){
                //             console.printf(ZPathNode(Plan.Peek()).Marker.Args[0].."aa");
                //             A_MoveTo(ZPathNode(Plan.Peek()).Marker);
                //         }
                //     }else Plan=null;
                // }
            }
            loop;
    }

    override
    void Tick(){
        super.Tick();
        Angle=ATan2(Vel.Y, Vel.X);
    }

    void A_Star(Actor Target=null, int Type=0){
        // if(!Target){
        //     if(self.Target)
        //         Target=self.Target;
        //     else return;
        // }
        // ActorIterator it=ActorIterator.Create(TID_NODES, "ZPathMarker");
        // double New,
        //        LastStart=double.MAX,
        //        LastTarget=double.MAX;
        // ZPathMarker Start, Goal, Marker;

        // while(Marker=ZPathMarker(it.Next())){
        //     if((New=Distance2D(Marker)+Marker.Distance2D(Target))<LastStart && CheckSight(Marker)){
        //         Start=Marker;
        //         LastStart=New;
        //     }
        //     if(New<LastTarget && Target.CheckSight(Marker)){
        //         Goal=Marker;
        //         LastTarget=New;
        //     }
        // }
        // Plan=ZManager.Instance().Graph(0).GetPlan(Start.Node, Goal.Node);
    }
}

class dd:DoomImp{
    States{
        Spawn:
            TROO A 1;
            loop;
    }
    // override
    // bool CanCollideWith(Actor Other, bool Passive){
    //     return Distance3D(Other)<=Radius+Other.Radius;
    // }
}