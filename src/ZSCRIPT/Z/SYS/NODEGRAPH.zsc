class ZNavMesh play{
    Array<ZNavSector> Sectors;

    void createNodes(double Height){
        Sectors.Resize(Level.Sectors.Size());
        for(int i=0; i<Sectors.Size(); i++){
            Sector Ref=Level.Sectors[i];
            SecPlane Floor=Ref.FloorPlane, Ceiling=Ref.CeilingPlane;
            if(Ref.FindLowestCeilingPoint()-Ref.FindHighestFloorPoint()<Height)
                continue;
            Sectors[i]=ZNavSector.Create(Ref);
        }
        for(int i=0; i<Level.Lines.Size(); i++){
            Line Line=Level.Lines[i];
            if((~Line.Flags & Line.ML_TWOSIDED) || (Line.Flags & (Line.ML_BLOCKING | Line.ML_BLOCKMONSTERS | Line.ML_BLOCKEVERYTHING)))
                continue;
            ZNavSector Front=Sectors[Line.FrontSector.Index()],
                       Back=Sectors[Line.BackSector.Index()];
            if(!Front || !Back)
                continue;
            Sector FRef=Front.Ref,
                   BRef=Back.Ref;
        }
    }
}

class ZNavSector:Av_Node{
    int Index;

    Vector3 Center;

    Sector Ref;

    SecPlane Floor,
             Ceiling;

    static
    ZNavSector Create(Sector Ref){
        ZNavSector Result=ZNavSector(Av_Node.Create('ZNavSector'));
        Vector2 CenterSpot=Ref.CenterSpot;
        Result.Center=Av_Calc.V2().ToV3(CenterSpot, Ref.FloorPlane.ZAtPoint(CenterSpot));
        Result.Ref=Ref;
        Result.Floor=Ref.FloorPlane;
        Result.Ceiling=Ref.CeilingPlane;
        return Result;
    }

    override
    double DistanceTo(Av_Node Other){
        ZNavSector Actual=ZNavSector(Other);
        if(!Actual)
            Error("Attempted to connect non-ZPathNode");
        return level.Vec3Diff(Center, Actual.Center).Length();
    }
}

class ZNavLine:Av_Edge{
    int LineFlags;

    Vector3 Midpoint;

    static
    ZNavLine Create(ZNavSector From, ZNavSector To, int LineFlags){
        ZNavLine Result=ZNavLine(Av_Edge.Create('ZNavLine', From, To));
        Result.LineFlags=LineFlags;
        Result.Midpoint=Av_Calc.V3().Midpoint(From.Center, To.Center);
        return Result;
    }
}