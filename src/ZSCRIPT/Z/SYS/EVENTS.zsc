extend
class ZManager{
    ZEventManager EventManager;

    private
    void InitEvents(){}

    private
    void LoadEvents(){
        EventManager=ZEventManager.Instance();
    }
}

class ZEventManager:EventHandler{
    private
    Array<ZStimulus> Stimuli;

    private
    Array<ZReactor> Reactors;

    static
    ZEventManager Instance()
    {return ZEventManager(EventHandler.Find("ZEventManager"));}

    override
    void WorldTick(){
        for(int i=Stimuli.Size()-1; i>=0; i--){
            ZStimulus Stimulus=Stimuli[i];
            if(!Stimulus){
                Stimuli.Delete(i);
            }else if(Stimulus.Decay==0 || !Consumed(Stimulus)){
                Stimuli.Delete(i);
                Stimulus.Destroy();
            }else
                Stimulus.Tick();
        }
    }

    void RegisterStimulus(ZStimulus Stimulus){
        if(Stimuli.Find(Stimulus)!=Stimuli.Size())
            Cl_Util.Log(']Stim_React[', LOG_Error, "Stimulus: "..Stimulus.ID.." is Already Registered");
        if(Consumed(Stimulus))
            Stimuli.Push(Stimulus);
        else
            Stimulus.Destroy();
    }

    private
    bool Consumed(ZStimulus Stimulus){
        for(int i=0; i<Reactors.Size(); i++)
            if(Reactors[i].CurrStim==Stimulus)
                return true;
        return false;
    }

    void RegisterReactor(ZReactor Reactor){
        if(Reactors.Find(Reactor)!=Reactors.Size())
            Cl_Util.Log(']Stim_React[', LOG_Error, "Reactor: "..Reactor.ID.." is Already Registered");
        Reactors.Push(Reactor);
    }
}