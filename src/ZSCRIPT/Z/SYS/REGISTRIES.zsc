extend
class ZManager{
    private
    ZDamageTypes DamageTypes;

    private
    ZArmorUpgrades ArmorUpgrades;

    private
    Array<Av_Graph> NodeGraphs;

    private
    ZEntityManager Entities;

    private
    void InitRegistries(){
        // Node Graphs
        // ActorIterator it=ActorIterator.Create(TID_NODES, "ZPathMarker");
        // ZPathNode StartNode, TargetNode, Node;
        // ZPathMarker Marker;
        // static const uint NodeGraphTypes[]={
        //     PATH_ALL
        // };
        // for(int i=0; i<NodeGraphTypes.Size(); i++){
        //     Av_Graph Graph=new('Av_Graph');
        //     while(Marker=ZPathMarker(it.Next())){
        //         Marker.Init();
        //         if((Node=Marker.Node) && (i==PATH_ALL || Node.Type==NodeGraphTypes[i]))
        //             Graph.Nodes.Push(Marker.Node);
        //     }
        //     NodeGraphs.Push(Graph);
        // }
        // For registration
        Parser_TSV ParserTSV; TSVRow Row;
        // DamageTypes
        DamageTypes=ZDamageTypes(new('ZDamageTypes').Init());
        ParserTSV=Parser_TSV.Create(#config "DATA", "tDamageTypes");
        for(int i=1; i<ParserTSV.Size(); i++){
            Row=ParserTSV.GetRow(i);
            // Flags Management
            Array<String> Flags; Flags.Clear(); ZE_DamageInfo ActualFlags=0;
            Row.Get(6).Split(Flags, "|", TOK_SKIPEMPTY);
            for(int j=0; j<Flags.Size(); j++)
                if(Flags[j]~=="DMG_ZONE")
                    ActualFlags|=DMG_ZONE;
            // Registration
            DamageTypes.Add(ZDamageType.Create(Row.Get(0), Row.Get(1), Row.GetDouble(2), Row.GetDouble(3), Row.GetDouble(4), Row.GetDouble(5), ActualFlags));
        }
        // Upgrades
        static const Class<ZArmorUpgrade> ArmorUpgradeNames[]={
            $ZMAUpgrades
        };
        ArmorUpgrades=ZArmorUpgrades(new('ZArmorUpgrades').Init());
        ZArmorUpgrade Upgrade;
        for(int i=0; i<ArmorUpgradeNames.Size(); i++){
            ArmorUpgrades.Add(Upgrade=ZArmorUpgrade(ZUpgrade(new(ArmorUpgradeNames[i])).Init()));
            if(!Upgrade.Priority)
                Error(Upgrade.ID.." doesn't have an priority");
        }
        // Entities
        Entities=ZEntityManager.Instance();
    }

    clearscope
    Av_Graph Graph(uint Index)
    {return NodeGraphs[Index];}

    clearscope
    ZDamageType DamageType(Name ID)
    {return DamageTypes.Get(ID);}

    clearscope
    ZUpgrade Upgrade(ZE_UpgradeInfo Type, Name ID){
        switch(Type){
            case UPR_MARMOR:
                return ZUpgrade(ArmorUpgrades.Get("ZMAU_"..ID));
                break;
        }
        return null;
    }

    void RegisterEntity(ZEntity Entity)
    {Entities.Register(Entity);}

    void UnregisterEntity(ZEntity Entity)
    {Entities.Unregister(Entity);}
}