class ZMStats:Av_Thinker{
    [Config]{
        "BaseHealth": "STATS.iMaxHealth",
        "MaxPlate": "STATS.iStartPlate",
        "BasePlateAbsorption": "STATS.dPlateAbsorption",
        "BaseEnergy": "STATS.iMaxEnergy",
        "EnergyRechargeAmount": "STATS.iEnergyRechargeAmount",
        "SprintCost": "ABILITIES.iSprintCost",
        "SprintMultiplier": "ABILITIES.dSprintMultiplier",
        "RunHealthPercent": "STATS.dRunHealthPerc",
        "BaseShakeLevel": "STATS.iShakeLevel"
    }

    bool RechargeQueue;

    int Recharger,

        Intelligence,
        Willpower,
        Endurance,
        Strength,
        Defense,
        Agility,
        Luck,

        MaxStrain,

        // Health
        Health,
        MaxHealth,
        RunHealth,

        // Plating
        Plate,

        // Energy
        Energy,
        MaxEnergy,
        LastEnergy,
        IdleRechargeBonus,
        EnergyRechargeRate;

    double ForwardMove1,
           ForwardMove2,
           BaseForwardMove,
           SideMove1,
           SideMove2,
           BaseSideMove,
           ViewBob,
           JumpZ,
           BaseJumpZ,
           ClamberSpeed,
           CriticalChance,
           PlateAbsorption,

           ShakeLevel;

    Av_Mapper ArmorMapping;

    ZManager Manager;

    Array<ZArmorUpgrade> Upgrades;

    static
    ZMStats Instance(){
        ThinkerIterator it=ThinkerIterator.Create('ZMStats', STAT_STATIC);
        ZMStats p=ZMStats(it.Next());
        if(!p)p=new('ZMStats').Init();
        return p;
    }

    private
    ZMStats Init(){
        ChangeStatNum(STAT_STATIC);
        Manager=ZManager.Instance();
        // Attributes
        Intelligence=
        Willpower=
        Endurance=
        Strength=
        Defense=
        Agility=
        Luck=0;
        // Stats
        ForwardMove2=(ViewBob=ForwardMove1=BaseForwardMove=.65)/2;
        SideMove2=(SideMove1=BaseSideMove=.52)/2;
        JumpZ=BaseJumpZ=7;
        ClamberSpeed=1;
        Health=#config "STATS","iStartHealth";
        MaxHealth=BaseHealth;
        RunHealth=MaxHealth*RunHealthPercent;
        Plate=MaxPlate;
        PlateAbsorption=BasePlateAbsorption;
        ArmorMapping=Av_Mapper.Create(0, 1.5);
        MaxEnergy=Energy=BaseEnergy;
        EnergyRechargeRate=MaxEnergy/2;
        IdleRechargeBonus=2;
        ShakeLevel=BaseShakeLevel;
        // Inventory
        MaxStrain=20;
        AddUpgrade("LongFall");
        AddUpgrade("BoostDash");
        AddUpgrade("Shield");
        AddUpgrade("BoostJump");
        AddUpgrade("Magnet");
        AddUpgrade("Jetpack");
        AddUpgrade("PoweredSlide");
        ToggleUpgrade("BoostJump");
        ToggleUpgrade("BoostDash");
        ToggleUpgrade("LongFall");
        ToggleUpgrade("PoweredSlide");
        // ToggleUpgrade("Magnet");
        ToggleUpgrade("Jetpack");
        return self;
    }

    int, int, int GetHealth() const
    {return Health, MaxHealth, RunHealth;}

    double, double, double GetForwardMove() const
    {return ForwardMove1, ForwardMove2, SprintMultiplier;}

    double, double GetSideMove() const
    {return SideMove1, SideMove2;}

    int GetStrain() const{
        int TotalStrain=0;
        for(int i=0; i<Upgrades.Size(); i++)
            if(Upgrades[i].Activated)
                TotalStrain+=Upgrades[i].Strain;
        return TotalStrain;
    }

    void UpdateStats(){
        RunHealth=MaxHealth*RunHealthPercent;
        PlateAbsorption=(1+.12*Min(Defense, 25))*BasePlateAbsorption;
        MaxEnergy=(1+.04*Endurance)*BaseEnergy;
        EnergyRechargeRate=MaxEnergy/2;
        ShakeLevel=(1-.001*(Willpower+Strength))*BaseShakeLevel;
        ForwardMove2=(ViewBob=ForwardMove1=(1+.01*Agility)*BaseForwardMove)/2;
        SideMove2=(SideMove1=(1+.01*Agility)*BaseSideMove)/2;
        JumpZ=.015*(Strength+Agility)+BaseJumpZ;
        ClamberSpeed=1+.02*(Strength+Agility);
        CriticalChance=.001*Luck;
    }

    // void SortUpgrades(){
    //     int N=Upgrades.Size();
    //     for(int i=0; i<Upgrades.Size(); i++){
    //         int IndexOfMax=i;
    //         for(int j=i+1; j<N; j++){
    //             if(Upgrades[j].Priority>Upgrades[IndexOfMax].Priority)
    //                 IndexOfMax=j;
    //         }
    //         if(IndexOfMax!=i){
    //             ZArmorUpgrade Temp=Upgrades[i];
    //             Upgrades[i]=Upgrades[IndexOfMax];
    //             Upgrades[IndexOfMax]=Temp;
    //         }
    //     }
    // }

    bool AddUpgrade(Name ID){
        ZArmorUpgrade Upgrade=ZArmorUpgrade(Manager.Upgrade(UPR_MARMOR, ID));
        if(Upgrades.Find(Upgrade)!=Upgrades.Size()){
            Error("Upgrade: "..Upgrade.ID.."is already in player inventory");
            return false;
        }
        if(Upgrades.Size()>0 && Upgrade.Priority>Upgrades[0].Priority){
            Upgrades.Insert(0, Upgrade);
            return true;
        }
        for(int i=0; i<Upgrades.Size()-1; i++)
            if(Upgrade.Priority<=Upgrades[i].Priority && Upgrades[i+1].Priority<Upgrade.Priority){
                Upgrades.Insert(i+1, Upgrade);
                return true;
            }
        return Upgrades.Push(Upgrade);
    }

    bool ToggleUpgrade(Name ID){
        int Index;
        ZArmorUpgrade Upgrade=ZArmorUpgrade(Manager.Upgrade(UPR_MARMOR, ID));
        if(!Upgrade || (!Upgrade.Activated && Upgrade.Strain+GetStrain()>MaxStrain) || (Index=Upgrades.Find(Upgrade))==Upgrades.Size())return false;
        Upgrades[Index].Activated=!Upgrades[Index].Activated;
        return true;
    }

    virtual
    void ArmorTick(ZMarine Player){
        if(!Player || Player.Health<=0 || Plate<=0)return;
        RechargeQueue=true;
        Recharge(Player);
        for(int i=0; i<Upgrades.Size(); i++){
            if(Upgrades[i].Activated)
                Upgrades[i].Tick(Player, Player.Player);}
    }

    virtual
    void HandleMovement(ZMarine Player){
        if(!Player || Player.Health<=0 || Plate<=0)return;
        for(int i=0; i<Upgrades.Size(); i++)
            if(Upgrades[i].Activated)
                Upgrades[i].HandleMovement(Player, Player.Player);
    }

    virtual
    private
    void Recharge(ZPlayer Player){
        int ShieldGoal;
        if(Energy!=LastEnergy){
            Recharger=0;
            RechargeQueue=false;
        }
        if(Energy<MaxEnergy){
            RechargeQueue=false;
            if(Recharger==EnergyRechargeRate){
                Energy=Min(Energy+EnergyRechargeAmount*(Player.Vel==(0,0,0)?IdleRechargeBonus:1), MaxEnergy);
                if(Energy==MaxEnergy)Recharger=0;
            }else Recharger++;
        }
        LastEnergy=Energy;
    }

    virtual
    int ModifyDamage(Actor Inflictor, Actor Source, int Damage, Name Mod, bool Passive, int Flags=0){
        if(Passive){
            if(Plate<=0)
                return Damage;
            ZDamageType DamageType=Manager.DamageType(Mod);
            if(!DamageType){
                Error("Undefined ZDamageType: "..Mod);
                return 0;
            }
            double Dam, TempDamage=Damage;
            Array<ZArmorUpgrade> Upgrades;
            for(int i=0; i<Upgrades.Size(); i++)
                if(Upgrades[i].Activated)
                    TempDamage=Upgrades[i].ModifyDamage(Inflictor, Source, TempDamage, DamageType, Flags);
            int PlateHit;
            // Armor Plating
            if((Dam=TempDamage*DamageType.Factor(AMR_PLATE))>0){
                TempDamage*=1-Floor(PlateHit=PlateAbsorption*ArmorMapping.ANormRangeMap(double(Plate)/MaxPlate));
                Plate=Max(Plate-PlateHit, 0);
            }
            return Ceil(TempDamage);
        }else{
            ZWeapon Weapon=ZWeapon(Source);
            switch(Mod){
                case 'Melee':
                    Damage*=1+.03*Strength;
                    break;
            }
            return Damage+(FRandom(0, 1)<=CriticalChance*Weapon.CriticalMultiplier())*Weapon.CritDmg;
        }
    }
}