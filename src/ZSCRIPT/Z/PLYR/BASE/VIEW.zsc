extend
class ZPlayer{
    bool LockView,
         LockTilt;

    double ActiveYaw,
           ActivePitch,
           ActiveRoll,
           PassiveRoll,
           RunOscillation;

    Vector2 SideVector,
            FrontVector;

    Vector3 ViewVector;

    Av_Mapper Perl2Shake;

    Av_Perlin YawShake,
            PitchShake,
            RollShake;

    virtual
    void HandleView(){
        HandleScreenShake();
        HandleViewTilt();
        if(!LockView)
            HandleViewChange();
        HandleOrientation();
        HandleDirectionVectors();
    }

    virtual
    double ShakeLevel() const
    {return 1;}

    virtual
    void HandleScreenShake(){
        AddScreenShake(Av_Calc_S.NormRangeMap(Vel.Z-LastVel.Z, 35, 50));
        double CurrentShake=ShakeLevel()*Clamp(Av_Calc_S.SmoothStart(Stats.Shake), 0, 1);
        if(CurrentShake>0){
            ActiveYaw=CurrentShake*Perl2Shake.RangeMap(YawShake.Get(Level.MapTime%1000, 1));
            ActivePitch=CurrentShake*Perl2Shake.RangeMap(PitchShake.Get(Level.MapTime%1000, 1));
            ActiveRoll=2*CurrentShake*Perl2Shake.RangeMap(RollShake.Get(Level.MapTime%1000, 1));
            AddScreenShake(-.02);
        }else ActiveYaw=ActivePitch=ActiveRoll=0;
    }

    virtual
    void HandleViewTilt(){
        if(LockTilt)return;
        if(Player.OnGround)PassiveRoll+=Sin(RunOscillation+=11.25)*(Vel.XY dot FrontVector)/30;
        PassiveRoll+=Clamp((Vel.XY dot SideVector)/7.5, -1, 1);
        PassiveRoll*=!Av_Calc_S.Equals(PassiveRoll, 0, .0001)*.75;
    }

    virtual
    void HandleViewChange(){
        UserCmd cmd=Player.cmd;
        Stats.ActualYaw+=cmd.Yaw*(360/65536.);
        Stats.ActualPitch=Clamp(Stats.ActualPitch-cmd.Pitch*(360/65536.), -90, 90);
    }

    virtual
    void HandleOrientation(){
        Angle--;
        Pitch--;
        Roll--;
        A_SetAngle(Stats.ActualYaw+ActiveYaw, SPF_INTERPOLATE);
        A_SetPitch(Stats.ActualPitch+ActivePitch, SPF_INTERPOLATE);
        A_SetRoll(Stats.ActualRoll+ActiveRoll+PassiveRoll, SPF_INTERPOLATE);
    }

    virtual
    void HandleDirectionVectors(){
        double XYLength=Cos(Stats.ActualPitch);
        ViewVector=(Cos(Stats.ActualYaw)*XYLength, Sin(Stats.ActualYaw)*XYLength, -Sin(Stats.ActualPitch)).Unit();
        FrontVector=AngleToVector(Stats.ActualYaw);
        SideVector=RotateVector(FrontVector, -90);
    }
}